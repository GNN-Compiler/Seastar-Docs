============================
Compiler Interface (zoom_v2)
============================

Overview
========

Todo: Give a brief overview of what zoom_v2 does

Dependencies
============

Imported Libraries
------------------

``functools``
    for functools.update_wrapper() in __init__ of class ``Context``

``collections``
    for defaultdict, Iterable in ``_trace()`` and namedtuple in class ``Context``

Modules
-------

``node`` 
``val``
``op``
``program``
``passes``
``schema``
``autodiff``
``code_gen``
``executor``
``utils``

Used In
-------

``__init__``

.. py:class:: Context

    GraphInfo is a named tuple data structure whose fields can be
    accessed using indexing and the following field names 

    ``GraphInfo(number_of_nodes, number_of_edges, in_row_offsets, in_col_indices, in_eids, out_row_offsets, out_col_indices, out_eids, nbits)``
 
    .. attribute:: _f
        :type: function
    .. py:attribute:: _nspace
        :type: list
    .. py:attribute:: _entry_count
        :type: int
    .. py:attribute:: _run_cb
        :type: 
    .. py:attribute:: _input_cache
        :type: dict
    .. py:attribute:: _graph_info_cache
        :type: 
    .. py:attribute:: _executor_cache
        :type: 


.. function:: creat_exp_list_sample0 (args)

    According to the different GNN models passed as input through the command line,
    ``create_exp_list_sample0`` returns a list (*exp_list*) of GNNExp class objects.

   :param args: Contains the arguments passed through the command line. Arguments are models, systems, gpu and num_epochs.
    eg: ``args = Namespace(gpu=0, models=['gcn'], num_epochs=200, systems=['dgl', 'seastar'])``
   :rtype: List of GNNExp class objects. These objects can be from the following
    classes: GATExp, GCNExp, APPNPExp and RGCNExp

.. function:: __init__(func, nspace, run_cb)

    :param func: A function instance of GCNModel.forward.<locals>.nb_compute
    :param nspace: A list containing the GCNModel object and a instance of the torch module
    :param run_cb: None

.. py:class:: CtxManager

    .. py:attribute:: _ctx_map
        :type: dict
    .. py:attribute:: _run_cb
        :type: 